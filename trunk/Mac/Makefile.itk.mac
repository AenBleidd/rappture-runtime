# Generated automatically from Makefile.in by configure.
# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.17 2001/05/29 15:51:16 andreas_kupries Exp $

#========================================================================
# Edit the following few lines when writing a new extension
#========================================================================

#========================================================================
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================

lib_BINARIES=$(itk_LIB_FILE) $(itkstub_LIB_FILE)
BINARIES=$(lib_BINARIES)

#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
#========================================================================

WIN_DIR=$(srcdir)/win
UNIX_DIR=$(srcdir)/unix
GENERIC_DIR=$(srcdir)/generic
PLATFORM_DIR=$(UNIX_DIR)

WIN_SOURCES=$(PLATFORM_DIR)/tclAppInit.c \
	$(PLATFORM_DIR)/dllEntryPoint.c
UNIX_SOURCES=$(PLATFORM_DIR)/tclAppInit.c
GENERIC_SOURCES = $(GENERIC_DIR)/itk_cmds.c \
	$(GENERIC_DIR)/itk_option.c \
	$(GENERIC_DIR)/itk_archetype.c \
	$(GENERIC_DIR)/itk_util.c \
	$(GENERIC_DIR)/itkStubInit.c \
	$(GENERIC_DIR)/itkStubLib.c 
PLATFORM_SOURCES = $(UNIX_SOURCES)
itk_SOURCES = $(PLATFORM_SOURCES) $(GENERIC_SOURCES)
SOURCES = $(itk_SOURCES)

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
#========================================================================

WIN_OBJECTS = dllEntryPoint.$(OBJEXT)
UNIX_OBJECTS =
GENERIC_OBJECTS = itk_cmds.$(OBJEXT) \
	itk_option.$(OBJEXT) \
	itk_archetype.$(OBJEXT) \
	itk_util.$(OBJEXT) \
	itkStubInit.$(OBJEXT) \
	itkStubLib.$(OBJEXT) 
PLATFORM_OBJECTS = $(UNIX_OBJECTS)
itk_OBJECTS = $(PLATFORM_OBJECTS) $(GENERIC_OBJECTS)
itkstub_OBJECTS = itkStubLib.$(OBJEXT)
OBJECTS = $(itk_OBJECTS) $(itkstub_OBJECTS)

#========================================================================
# The substitution of "exampleA_LIB_FILE" into the variable name below
# let's us refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
#========================================================================

itk_LIB_FILE = libitk3.2.dylib
$(itk_LIB_FILE)_OBJECTS = $(itk_OBJECTS)

itkstub_LIB_FILE = libitkstub3.2.a
$(itkstub_LIB_FILE)_OBJECTS = $(itkstub_OBJECTS)

itclstub_LIB_FILE = libitclstub3.2.a

tkstub_LIB_SPEC = -L/opt/rappture/lib -ltkstub8.4

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS= \
	$(srcdir)/generic/itk.h \
	$(srcdir)/generic/itkDecls.h

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

SAMPLE_NEW_VAR=@SAMPLE_NEW_VAR@

ITK_LIBRARY = $(prefix)/lib/itk$(VERSION)

ITK_GENERIC_DIR_NATIVE = ./generic
ITK_UNIX_DIR_NATIVE = ./unix
ITK_WIN_DIR_NATIVE = ./win

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

SHELL = /bin/sh

srcdir = .
top_srcdir = .
prefix = /opt/rappture
exec_prefix = /opt/rappture

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/itk3.2
pkglibdir = $(libdir)/itk3.2
pkgincludedir = $(includedir)/itk3.2

top_builddir = .

#INSTALL = $(top_srcdir)/../config/install-sh -c
INSTALL = $(TCLSH_PROG) `echo $(top_srcdir)/../config/installFile.tcl` -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL_PROGRAM}
INSTALL_STRIP_FLAG =
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

PACKAGE = itk
VERSION = 3.2
CC = cc
CFLAGS_DEBUG = -g
CFLAGS_DEFAULT = -Os
CFLAGS_OPTIMIZE = -Os
CLEANFILES = 
EXEEXT = 
LDFLAGS_DEBUG = @LDFLAGS_DEBUG@
LDFLAGS_DEFAULT = 
LDFLAGS_OPTIMIZE = @LDFLAGS_OPTIMIZE@
MAKE_LIB = ${SHLIB_LD} -o $@ $($@_OBJECTS) ${SHLIB_LDFLAGS} ${SHLIB_LD_LIBS}
MAKE_SHARED_LIB = ${SHLIB_LD} -o $@ $($@_OBJECTS) ${SHLIB_LDFLAGS} ${SHLIB_LD_LIBS}
MAKE_STATIC_LIB = ${STLIB_LD} $@ $($@_OBJECTS)
OBJEXT = o
RANLIB = /usr/bin/ranlib -s
SHLIB_CFLAGS = -fno-common
SHLIB_LD = cc -dynamiclib ${LDFLAGS} -Wl,-single_module
SHLIB_LDFLAGS = 
SHLIB_LD_LIBS = -L/opt/rappture/lib -ltkstub8.4 -L/opt/rappture/lib -ltclstub8.4${TCL_DBGX} ../itcl/libitclstub3.2.a
STLIB_LD = ${AR} cr
TCL_BIN_DIR = /opt/rappture/lib
TCL_DEFS =  -DHAVE_COREFOUNDATION=1 -DMAC_OSX_TCL=1 -DUSE_VFORK=1 -DTCL_DEFAULT_ENCODING=\"utf-8\" -DTCL_LOAD_FROM_MEMORY=1 -DTCL_WIDE_INT_TYPE=long\ long -DWORDS_BIGENDIAN=1 -DHAVE_GETCWD=1 -DHAVE_OPENDIR=1 -DHAVE_STRSTR=1 -DHAVE_STRTOL=1 -DHAVE_STRTOLL=1 -DHAVE_STRTOULL=1 -DHAVE_TMPNAM=1 -DHAVE_WAITPID=1 -DNO_VALUES_H=1 -DHAVE_LIMITS_H=1 -DHAVE_UNISTD_H=1 -DHAVE_SYS_PARAM_H=1 -DUSE_TERMIOS=1 -DHAVE_SYS_TIME_H=1 -DTIME_WITH_SYS_TIME=1 -DHAVE_TM_ZONE=1 -DHAVE_GMTIME_R=1 -DHAVE_LOCALTIME_R=1 -DHAVE_TM_GMTOFF=1 -DHAVE_ST_BLKSIZE=1 -DSTDC_HEADERS=1 -DHAVE_SIGNED_CHAR=1 -DHAVE_PUTENV_THAT_COPIES=1 -DHAVE_LANGINFO=1 -DHAVE_SYS_IOCTL_H=1 -DHAVE_SYS_FILIO_H=1 
TCL_EXTRA_CFLAGS = 
TCL_LD_FLAGS =  -prebind -headerpad_max_install_names -Wl,-search_paths_first
TCL_LIBS =   -framework CoreFoundation 
TCL_SHLIB_LD_LIBS = ${LIBS}
TCL_SRC_DIR = /opt/rappture-runtime/tcl8.4.11
TCL_DBGX = 
TCL_STUB_LIB_FILE = libtclstub8.4${TCL_DBGX}.a
TCL_STUB_LIB_SPEC = -L/opt/rappture/lib -ltclstub8.4${TCL_DBGX}
TCL_TOOL_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/tools
TCL_TOP_DIR_NATIVE = $(TCL_SRC_DIR)
TCL_UNIX_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/unix
TCL_WIN_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/win
INCLUDE_DIR_NATIVE = @INCLUDE_DIR_NATIVE@
TCL_BMAP_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/bitmaps
TCL_PLATFORM_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/unix
TCL_GENERIC_DIR_NATIVE = $(TCL_TOP_DIR_NATIVE)/generic
TK_TOP_DIR_NATIVE = $(TK_SRC_DIR)
TK_SRC_DIR = /opt/rappture-runtime/tk8.4.11
TCLSH_PROG = /opt/rappture/bin/tclsh8.4
WISH_PROG = /opt/rappture/bin/wish8.4
TK_XINCLUDES = -I/usr/X11R6/include
TCL_INCLUDES = -I$(TCL_TOP_DIR_NATIVE)/generic -I$(TCL_TOP_DIR_NATIVE)/unix
TK_INCLUDES = -I$(TK_TOP_DIR_NATIVE)/generic -I$(TK_TOP_DIR_NATIVE)/unix
ITCL_INCLUDES = -I"/opt/rappture-runtime/itcl3.2.1/itcl/generic"
ITK_INCLUDES = -I"/opt/rappture-runtime/itcl3.2.1/itcl/generic" -I"./generic" -I"./unix" -I/usr/X11R6/include

AUTOCONF = autoconf

LDFLAGS = $(LDFLAGS_DEFAULT)

INCLUDES = -I$(TCL_TOP_DIR_NATIVE)/generic -I$(TCL_TOP_DIR_NATIVE)/unix -I$(TK_TOP_DIR_NATIVE)/generic -I$(TK_TOP_DIR_NATIVE)/unix $(ITK_INCLUDES)

EXTRA_CFLAGS = $(AC_FLAGS) $(PROTO_FLAGS) $(MEM_DEBUG_FLAGS) $(NO_DEPRECATED_FLAGS) $(TCL_EXTRA_CFLAGS)

DEFS =  -DVERSION=\"3.2\" -DUSE_TCL_STUBS=1 -DUSE_TK_STUBS=1 -DUSE_ITCL_STUBS=1  $(EXTRA_CFLAGS) -DITK_LIBRARY=\"$(ITK_LIBRARY)\"

ACLOCAL_M4 = $(srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/../config/mkinstalldirs

CPPFLAGS = 
LIBS = 
AR = ar
CFLAGS = ${CFLAGS_DEFAULT} ${CFLAGS_WARNING} ${SHLIB_CFLAGS}
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	$(mkinstalldirs) $(includedir)
	@echo "Installing header files in $(includedir)"
	@for i in $(GENERIC_HDRS) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(includedir) ; \
	done;
	@echo "Installing library files in $(ITK_LIBRARY)"
	@for i in $(srcdir)/library/*.* $(srcdir)/library/tclIndex ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(ITK_LIBRARY) ; \
	done;

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	$(mkinstalldirs) $(mandir)/mann
	@echo "Installing man pages in $(mandir)"
	@for i in $(srcdir)/doc/*.n; \
	    do \
	    echo "Installing $$i info $(mandir)/mann"; \
	    rm -f $(mandir)/mann/`basename $$i`; \
	    $(INSTALL_DATA) $$i $(mandir)/mann ; \
	    done

test: $(TCLSH_PROG)
	$(TCLSH_PROG) `echo $(srcdir)/tests/all.tcl` \
		-exedir `echo $(bindir)` $(TESTFLAGS)

depend:

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
# $(exampleA_LIB_FILE) should be listed as part of the BINARIES variable
# at the top of the Makefile.  That will ensure that this target is built
# when you run "make binaries".
#
# You shouldn't need to modify this target, except to change the package
# name from "exampleA" to your package's name.
#========================================================================

$(itk_LIB_FILE): $(itk_OBJECTS)
	-rm -f $(itk_LIB_FILE)
	${SHLIB_LD} -o $@ $($@_OBJECTS) ${SHLIB_LDFLAGS} ${SHLIB_LD_LIBS}
#	$(RANLIB) $(itk_LIB_FILE)

$(itkstub_LIB_FILE): $(itkstub_OBJECTS)
	-rm -f $(itkstub_LIB_FILE)
	${STLIB_LD} $@ $($@_OBJECTS)
	$(RANLIB) $(itkstub_LIB_FILE)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# exampleA.$(OBJEXT): $(srcdir)/src/win/exampleA.c
# 	$(COMPILE) -c `echo $(srcdir)/src/win/exampleA.c` -o $@
#========================================================================

dllEntryPoint.$(OBJEXT): $(WIN_DIR)/dllEntryPoint.c
	$(COMPILE) -c `echo $(WIN_DIR)/dllEntryPoint.c` -o $@

tclAppInit.$(OBJEXT): $(PLATFORM_DIR)/tclAppInit.c
	$(COMPILE) -c `echo $(PLATFORM_DIR)/tclAppInit.c` -o $@

itkStubInit.$(OBJEXT): $(GENERIC_DIR)/itkStubInit.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itkStubInit.c` -o $@

itkStubLib.$(OBJEXT): $(GENERIC_DIR)/itkStubLib.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itkStubLib.c` -o $@

itk_cmds.$(OBJEXT): $(GENERIC_DIR)/itk_cmds.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itk_cmds.c` -o $@

itk_option.$(OBJEXT): $(GENERIC_DIR)/itk_option.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itk_option.c` -o $@

itk_archetype.$(OBJEXT): $(GENERIC_DIR)/itk_archetype.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itk_archetype.c` -o $@

itk_util.$(OBJEXT): $(GENERIC_DIR)/itk_util.c
	$(COMPILE) -c `echo $(GENERIC_DIR)/itk_util.c` -o $@


#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: installdirs
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
	        echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_PROGRAM) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_PROGRAM) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    else \
		echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_PROGRAM) $$p $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	  else :; fi; \
	done
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done
	$(INSTALL_DATA) pkgIndex.tcl $(pkglibdir)

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries: installdirs
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .o .obj

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

#config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
#	$(SHELL) ./config.status --recheck
#$(srcdir)/configure: $(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)
#	cd $(srcdir) && $(AUTOCONF)


uninstall-binaries:
	@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(bindir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)
	$(mkinstalldirs)  $(ITK_LIBRARY)

.PHONY: all binaries clean depend distclean doc install installdirs \
libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
