diff -r -u '--exclude=.svn' ./contrib/uiuc/plugins/molfile_plugin/src/periodic_table.h ../pymol/contrib/uiuc/plugins/molfile_plugin/src/periodic_table.h
--- ./contrib/uiuc/plugins/molfile_plugin/src/periodic_table.h	2009-03-14 16:46:51.000000000 -0400
+++ ../pymol/contrib/uiuc/plugins/molfile_plugin/src/periodic_table.h	2011-10-11 14:11:08.000000000 -0400
@@ -74,7 +74,9 @@
     /* Na */ 1.36, 1.18, 2.0, 2.1, 1.8,
     /* S  */ 1.8, 2.27, 1.88, 1.76, 1.37, 2.0,
     /* Ti */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
-    /* Ni */ 1.63, 1.4, 1.39, 1.07, 2.0, 1.85,
+    /* PYMOLSERVER */
+    /* Ni */ 1.63, 1.4, 1.39, 1.87, 2.0, 1.85, /* gah - changed radius */
+    /* PYMOLSERVER */
     /* Se */ 1.9, 1.85, 2.02, 2.0, 2.0, 2.0, 
     /* Zr */ 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
     /* Pd */ 1.63, 1.72, 1.58, 1.93, 2.17, 2.0, 
diff -r -u '--exclude=.svn' ./layer0/MyPNG.c ../pymol/layer0/MyPNG.c
--- ./layer0/MyPNG.c	2009-03-04 00:15:27.000000000 -0500
+++ ../pymol/layer0/MyPNG.c	2011-10-12 17:00:02.000000000 -0400
@@ -40,7 +40,7 @@
 #  define png_jmpbuf(png_ptr) ((png_ptr)->jmpbuf)
 #endif
 
-#endif
+#endif	/* _PYMOL_LIBPNG */
 
 #include"os_std.h"
 
@@ -49,6 +49,61 @@
 #include"MemoryDebug.h"
 #include "Setting.h"
 
+#ifdef _PYMOL_LIBPNG
+/* PYMOLSERVER */
+struct Buffer_ {
+    unsigned char *bytes;
+    size_t allocated;
+    size_t used;
+};
+
+/* PNG/PPM stdout support *NJK */
+/* add ability to write PNG/PPM files to standard output    */
+
+static void
+PngWriteDataProc(png_structp png_ptr, png_bytep buf, png_size_t length)
+{
+    void *write_io_ptr;
+    struct Buffer_ *bufPtr;
+    int available;
+    
+    write_io_ptr = png_get_io_ptr(png_ptr);
+    bufPtr = write_io_ptr;
+    available = bufPtr->allocated - bufPtr->used;
+    
+    if (length > available) {
+	unsigned char *newdata;
+	int needed;
+
+	needed = length - available;
+	if (needed < 32768) {
+	    needed = 32768;
+	}
+	if (bufPtr->bytes == NULL) {
+	    newdata = malloc(bufPtr->allocated + needed);
+	} else {
+	    newdata = realloc(bufPtr->bytes, bufPtr->allocated + needed);
+	}
+	if (newdata == NULL) {
+	    return;
+	}
+	bufPtr->bytes = newdata;
+	bufPtr->allocated += needed;
+    }
+    memcpy((unsigned char *)bufPtr->bytes + bufPtr->used, buf, length);
+    bufPtr->used += length;
+    return;
+}
+
+static void
+PngFlushDataProc(png_structp png_ptr)
+{
+    return;
+}
+
+#endif /* _PYMOL_LIBPNG */
+
+/* PYMOLSERVER */
 
 int MyPNGWrite(PyMOLGlobals *G,char *file_name,unsigned char *data_ptr,
                unsigned int width,unsigned int height,float dpi,
@@ -58,6 +113,7 @@
   case cMyPNG_FormatPNG:
     {
 #ifdef _PYMOL_LIBPNG
+  struct Buffer_ buf;
   int ok=true;
   FILE *fp = NULL;
   png_structp png_ptr;
@@ -73,6 +129,12 @@
   
   /* open the file, allowing use of an encoded file descriptor, with
      approach adapted from TJO: chr(1) followed by ascii-format integer */
+
+  /* PYMOLSERVER */
+  if(strcmp(file_name, "-.png") == 0) {	 
+      fp = stdout;		/* PNG stdout support */
+  } else {
+  /* PYMOLSERVER */
   if(file_name[0] == 1) {
     if( sscanf(file_name+1, "%d", &fd) == 1) {
       fp = fdopen(fd, "wb");
@@ -87,6 +149,8 @@
     ok=false;
     goto cleanup;
   }
+  }
+
    /* Create and initialize the png_struct with the desired error handler
     * functions.  If you want to use the default stderr and longjump method,
     * you can supply NULL for the last three parameters.  We also check that
@@ -103,7 +167,7 @@
    /* Allocate/initialize the image information data.  REQUIRED */
    info_ptr = png_create_info_struct(png_ptr);
    if (info_ptr == NULL) {
-     png_destroy_write_struct(&png_ptr,  (png_infopp)NULL);
+     png_destroy_write_struct(&png_ptr,  (png_infop *)NULL);
      ok=false;
      goto cleanup;
    }
@@ -113,13 +177,20 @@
     */
    if (setjmp(png_jmpbuf(png_ptr))) {
      /* If we get here, we had a problem reading the file */
-     png_destroy_write_struct(&png_ptr,  (png_infopp)NULL);
+     png_destroy_write_struct(&png_ptr,  (png_infop *)NULL);
      ok=false;
      goto cleanup;
    }
-
+   
    /* set up the output control if you are using standard C streams */
+   /* PYMOLSERVER */
+   memset(&buf, 0, sizeof(buf));
+   if(fp == stdout) {		/* PNG stdout support *NJK* */
+       png_set_write_fn(png_ptr, &buf, PngWriteDataProc, PngFlushDataProc);
+   } else {
+   /* PYMOLSERVER */
    png_init_io(png_ptr, fp);
+   }
 
    /* Set the image information here.  Width and height are up to 2^31,
     * bit_depth is one of 1, 2, 4, 8, or 16, but valid values also depend on
@@ -137,6 +208,9 @@
      png_set_pHYs(png_ptr, info_ptr, dots_per_meter, dots_per_meter, PNG_RESOLUTION_METER);
    }
 
+   /* PYMOLSERVER */
+   png_set_compression_level(png_ptr,1); /* PNG stdout support *NJK* */
+   /* PYMOLSERVER */
 
    png_set_gamma(png_ptr, SettingGet(G,cSetting_png_screen_gamma), 
                  SettingGet(G,cSetting_png_file_gamma));
@@ -181,50 +255,96 @@
    png_destroy_write_struct(&png_ptr, (png_infopp)NULL);
 
  cleanup:
+
+   /* PYMOLSERVER */
+   if (fp == stdout) {
+       /* Stdout image patch *NJK */
+       fprintf(fp, "png image follows: %d\n", buf.used);
+       fwrite(buf.bytes, sizeof(char), buf.used, fp);
+       fflush(fp);
+       if (buf.bytes != NULL) {
+	   free(buf.bytes);
+       }
+   } else {
+   /* PYMOLSERVER */
    if(fp) {
-     /* close the file */
      fclose(fp);
    }
-   
+   }
    mfree(row_pointers);
    /* that's it */
 
    return ok;
 #else
-
    return 0;
-#endif
+#endif	/*PYMOL_LIBPNG  */
     }
     break;
   case cMyPNG_FormatPPM:
     {
-      FILE *fil=fopen(file_name,"wb");
-      unsigned char *buffer = Alloc(unsigned char,3*width*height);
-
-      if(fil && buffer) {
-        fprintf(fil,"P6\n");
-        fprintf(fil,"%d %d\n",width, height);
-        fprintf(fil,"255\n");
-        {
-          int a,b;
-          unsigned char *q = buffer, *p;
-          p = data_ptr + width * 4 * (height-1);
-          for(b=0;b<height;b++) {
-            for(a=0;a<width;a++) {
-              *(q++) = *(p++);  /* platform-specific ordering? */
-              *(q++) = *(p++);
-              *(q++) = *(p++);
-              p++;
-            }
-            p -= width * 8;
-          }
-          fwrite(buffer,width,height*3,fil);
-        }
-      }
-      if(fil) {
-        fclose(fil);
-      }
-      FreeP(buffer);
+	/* PYMOLSERVER */
+	if(strcmp(file_name, "-.png") == 0) {	 
+	    FILE *fp;
+	    char header[200];
+	    size_t numBytes, srcBytesPerRow, destBytesPerRow;
+	    unsigned char *srcRowPtr, *destRowPtr, *bytes;
+	    int y;
+
+	    numBytes = width * height * 3;
+	    bytes = Alloc(unsigned char, numBytes);
+	    sprintf(header, "P6\n%d %d\n255\n", width, height);
+	    fprintf(stdout, "ppm image follows: %ul\n%s", 
+		numBytes + strlen(header), header);
+	    srcBytesPerRow = width * 4;
+	    destBytesPerRow = width * 3;
+	    destRowPtr = bytes;
+	    srcRowPtr = data_ptr + srcBytesPerRow * (height-1);
+	    for (y = 0; y < height; y++) {
+		unsigned char *dp, *dend, *sp;
+		sp = srcRowPtr;
+
+		for (dp = destRowPtr, dend = dp + destBytesPerRow; dp < dend; 
+		     dp += 3, sp += 4) {
+		    dp[0] = sp[0];  
+		    dp[1] = sp[1];
+		    dp[2] = sp[2];
+		}			
+		srcRowPtr -= srcBytesPerRow;
+		destRowPtr += destBytesPerRow;
+	    }
+	    fwrite(bytes, 1, numBytes, stdout);
+	    fflush(stdout);
+	    FreeP(bytes);
+	} else {
+       /* PYMOLSERVER */
+	    FILE *fil=fopen(file_name,"wb");
+	    unsigned char *buffer = Alloc(unsigned char,3*width*height);
+
+	    if(fil && buffer) {
+		fprintf(fil,"P6\n");
+		fprintf(fil,"%d %d\n",width, height);
+		fprintf(fil,"255\n");
+		{
+		    int a,b;
+		    unsigned char *q = buffer, *p;
+		    p = data_ptr + width * 4 * (height-1);
+		    for(b=0;b<height;b++) {
+			for(a=0;a<width;a++) {
+			    *(q++) = *(p++);  /* platform-specific ordering? */
+			    *(q++) = *(p++);
+			    *(q++) = *(p++);
+			    p++;
+			}
+			p -= width * 8;
+		    }
+		    fwrite(buffer,width,height*3,fil);
+		}
+	    }
+	    if(fil) {
+		fclose(fil);
+	    }
+	    FreeP(buffer);
+	}
     }
     return 1;
     break;
@@ -398,15 +518,7 @@
    return(ok);
 #else
    return (false);
-#endif
+#endif /* _PYMOL_LIBPNG */
   
 } /* end of source */
 
-
-
-
-
-
-
-
-
Only in ../pymol/layer0: MyPNG.c-new
Only in ../pymol/layer0: MyPNG.c.~1~
Only in ../pymol/layer0: MyPNG.c.~2~
diff -r -u '--exclude=.svn' ./layer0/PyMOLGlobals.h ../pymol/layer0/PyMOLGlobals.h
--- ./layer0/PyMOLGlobals.h	2009-02-17 21:05:42.000000000 -0500
+++ ../pymol/layer0/PyMOLGlobals.h	2011-10-12 16:35:58.000000000 -0400
@@ -166,7 +166,9 @@
 
   int DragDirtyFlag; /* do we need an extra callback to handle a mouse drag? */
 
-
+  /* PYMOLSERVER */
+  int CmdPipe[2]; /* Sleep Interruption Patch *NJK* */
+  /* PYMOLSERVER */
 };
 
 /* if we're running PyMOL as a global singleton (old way / backward
Only in ../pymol/layer0: PyMOLGlobals.h.~1~
diff -r -u '--exclude=.svn' ./layer1/Ortho.c ../pymol/layer1/Ortho.c
--- ./layer1/Ortho.c	2009-03-14 17:05:24.000000000 -0400
+++ ../pymol/layer1/Ortho.c	2011-10-11 14:11:08.000000000 -0400
@@ -2066,9 +2066,15 @@
 /*========================================================================*/
 void OrthoCommandIn(PyMOLGlobals *G,char *buffer)
 {
+  /* PYMOLSERVER */
+  char c = 1;			/* Sleep Interruption Patch *NJK* */
+  /* PYMOLSERVER */
   register COrtho *I=G->Ortho;
   if(I->cmdActiveQueue)
 	QueueStrIn(I->cmdActiveQueue,buffer);
+  /* PYMOLSERVER */
+  write(G->CmdPipe[1], &c, 1);	/* Sleep Interruption Patch *NJK* */
+  /* PYMOLSERVER */
 }
 /*========================================================================*/
 void OrthoPasteIn(PyMOLGlobals *G,char *buffer)
diff -r -u '--exclude=.svn' ./layer1/P.c ../pymol/layer1/P.c
--- ./layer1/P.c	2009-03-29 21:41:32.000000000 -0400
+++ ../pymol/layer1/P.c	2011-10-11 14:11:08.000000000 -0400
@@ -617,13 +617,26 @@
 void PSleepUnlocked(PyMOLGlobals *G,int usec)
 { /* can only be called by the glut process */
 #ifndef WIN32
+  /*PYMOLSERVER */
+  fd_set fds;			/* Sleep Interruption Patch *NJK* */
+  /*PYMOLSERVER*/
   struct timeval tv;
   PRINTFD(G,FB_Threads)
     " PSleep-DEBUG: napping.\n"
     ENDFD;
   tv.tv_sec=0;
   tv.tv_usec=usec; 
-  select(0,NULL,NULL,NULL,&tv);
+
+  /* PYMOLSERVER */
+  /* Sleep Interruption Patch *NJK* */
+  FD_ZERO(&fds);
+  FD_SET(SingletonPyMOLGlobals->CmdPipe[0], &fds);
+  select(SingletonPyMOLGlobals->CmdPipe[0]+1, &fds, NULL, NULL, &tv);
+  if (FD_ISSET(SingletonPyMOLGlobals->CmdPipe[0],&fds)) {
+      char c;
+      read(SingletonPyMOLGlobals->CmdPipe[0], &c, 1);
+  }
+  /*PYMOLSERVER*/
   PRINTFD(G,FB_Threads)
     " PSleep-DEBUG: nap over.\n"
     ENDFD;
diff -r -u '--exclude=.svn' ./layer1/Scene.c ../pymol/layer1/Scene.c
--- ./layer1/Scene.c	2009-03-15 03:08:45.000000000 -0400
+++ ../pymol/layer1/Scene.c	2011-10-12 16:07:13.000000000 -0400
@@ -2066,6 +2066,8 @@
   SceneImageFinish(G,image);  
   return (image!=NULL);
 }
+
+
 /*========================================================================*/
 void ScenePerspective(PyMOLGlobals *G,int flag)
 {
Only in ../pymol/layer1: Scene.c.~1~
diff -r -u '--exclude=.svn' ./layer2/AtomInfo.c ../pymol/layer2/AtomInfo.c
--- ./layer2/AtomInfo.c	2009-02-03 03:42:43.000000000 -0500
+++ ../pymol/layer2/AtomInfo.c	2011-10-11 14:11:08.000000000 -0400
@@ -30,6 +30,10 @@
 #include"OVContext.h"
 #include"PyMOLObject.h"
 
+/*PYMOLSERVER*/
+static int RapptureGetVDWRadius(const char *symbol, float *radiusPtr);
+/*PYMOLSERVER*/
+
 struct _CAtomInfo {
   int NColor,CColor,DColor,HColor,OColor,SColor;
   int BrColor, ClColor, FColor, IColor;
@@ -2869,9 +2873,16 @@
   case cAN_Pb: vdw=2.02F; break;
 
   case cAN_U:  vdw=1.86F; break;
-
-  case cAN_LP: vdw=0.5F; break; /* lone pairs @ 0.5 same as MOE? */
-
+  /*PYMOLSERVER*/
+  case cAN_LP: 
+      vdw=1.70F; break; 
+      /* 
+       * gah@purdue.edu:  Try setting default radius to 1.7 (same as carbon). 
+       *		  Previous setting of 0.5 is too small (especially 
+       *		  with 0.25 sphere scale). 
+       */
+      /* lone pairs @ 0.5 same as MOE? */
+  /*PYMOLSERVER*/
   default: vdw=1.80F; break; /* default radius for known atoms with unknown radii */
   }
   
@@ -2887,6 +2898,11 @@
     if(!strcmp(e,"F")) vdw=1.35F;
     if(!strcmp(e,"H")) vdw=1.1F;
   }
+  /*PYMOLSERVER*/
+  /* This routine overrides the current radius value if it can find a matching
+   * element symbol. */
+  RapptureGetVDWRadius(e, &vdw);
+  /*PYMOLSERVER*/
 
   if(I->vdw==0.0) /* only assigned if not yet assigned */
     I->vdw = vdw;
@@ -2901,3 +2917,206 @@
   /*  printf("I->name %s I->priority %d\n",I->name,I->priority);*/
 }
   
+/*PYMOLSERVER*/
+/* 
+ *
+ * RapptureGetVDWRadius --
+ *
+ *	Get the van der Waals radius of the atom given the element symbol
+ *	(e.g. "Pb"). The values are taken from wikipedia (reference
+ *	http://www.webelements.com).
+ *
+ *	gah@purdue.edu: Several atoms (e.g. Ga, As) did not have a van der
+ *	Waals radius listed by default in pymol.  They defaulted to 0.5.  That
+ *	in conjunction with the setting of sphere_scale to 0.25 made the
+ *	spheres for these atoms too tiny to see.
+ *
+ *	Performs a binary search to lookup symbols and their corresponding
+ *	radii.
+ */
+struct VdwRadii {
+    char *symbol;
+    float radius;
+};
+
+static struct VdwRadii vdwRadii[] = {
+    /* The rows in the this table must be sorted alphabetically low to high by
+     * the element symbol. */
+    "Ac",       2.00f,
+    "Ag",       1.72f,
+    "Ag",       1.72f,
+    "Al",       2.00f,
+    "Am",       2.00f,
+    "Ar",       1.88f,
+    "Ar",       1.88f,
+    "As",       1.85f,
+    "As",       1.85f,
+    "At",       2.00f,
+    "Au",       1.66f,
+    "Au",       1.66f,
+    "B",        2.00f,
+    "Ba",       2.00f,
+    "Be",       2.00f,
+    "Bh",       2.00f,
+    "Bi",       2.00f,
+    "Bk",       2.00f,
+    "Br",       1.85f,
+    "Br",       1.85f,
+    "C",        1.70f,
+    "C",        1.70f,
+    "Ca",       2.00f,
+    "Cd",       1.58f,
+    "Cd",       1.58f,
+    "Ce",       2.00f,
+    "Cf",       2.00f,
+    "Cl",       1.75f,
+    "Cl",       1.75f,
+    "Cm",       2.00f,
+    "Co",       2.00f,
+    "Cr",       2.00f,
+    "Cs",       2.00f,
+    "Cu",       1.40f,
+    "Cu",       1.40f,
+    "Db",       2.00f,
+    "Ds",       2.00f,
+    "Dy",       2.00f,
+    "Er",       2.00f,
+    "Es",       2.00f,
+    "Eu",       2.00f,
+    "F",        1.47f,
+    "F",        1.47f,
+    "Fe",       2.00f,
+    "Fe",       2.00f,
+    "Fm",       2.00f,
+    "Fr",       2.00f,
+    "Ga",       1.87f,
+    "Ga",       1.87f,
+    "Gd",       2.00f,
+    "Ge",       2.00f,
+    "H",        1.09f,
+    "H",        1.20f,  
+    "He",       1.40f,
+    "He",       1.40f,  
+    "Hf",       2.00f,
+    "Hg",       1.55f,
+    "Hg",       1.55f,
+    "Ho",       2.00f,
+    "Hs",       2.00f,
+    "I",        1.98f,
+    "I",        1.98f,
+    "In",       1.93f,
+    "In",       1.93f,
+    "Ir",       2.00f,
+    "K",        2.75f,
+    "K",        2.75f,
+    "Kr",       2.02f,
+    "Kr",       2.02f,
+    "La",       2.00f,
+    "Li",       1.82f,
+    "Li",       1.82f,
+    "Lr",       1.50f,
+    "Lu",       2.00f,
+    "Md",       2.00f,
+    "Mg",       1.73f,
+    "Mg",       1.73f,
+    "Mn",       2.00f,
+    "Mo",       2.00f,
+    "Mt",       2.00f,
+    "N",        1.55f,
+    "N",        1.55f,
+    "Na",       2.27f,
+    "Na",       2.27f,
+    "Nb",       2.00f,
+    "Nd",       2.00f,
+    "Ne",       1.54f,
+    "Ne",       1.54f,
+    "Ni",       1.63f,
+    "Ni",       1.63f,
+    "No",       2.00f,
+    "Np",       2.00f,
+    "O",        1.52f,
+    "O",        1.52f,
+    "Os",       2.00f,
+    "P",        1.80f,
+    "P",        1.80f,
+    "Pa",       2.00f,
+    "Pb",       2.02f,
+    "Pb",       2.02f,
+    "Pd",       1.63f,
+    "Pd",       1.63f,
+    "Pm",       2.00f,
+    "Po",       2.00f,
+    "Pr",       2.00f,
+    "Pt",       1.72f,
+    "Pt",       1.75f,
+    "Pu",       2.00f,
+    "Ra",       2.00f,
+    "Rb",       2.00f,
+    "Re",       2.00f,
+    "Rf",       2.00f,
+    "Rh",       2.00f,
+    "Rn",       2.00f,
+    "Ru",       2.00f,
+    "S",        1.80f,
+    "S",        1.80f,
+    "Sb",       2.00f,
+    "Sc",       2.00f,
+    "Se",       1.90f,
+    "Se",       1.90f,
+    "Sg",       2.00f,
+    "Si",       2.10f,
+    "Si",       2.10f,
+    "Sm",       2.00f,
+    "Sn",       2.17f,
+    "Sn",       2.17f,
+    "Sr",       2.00f,
+    "Ta",       2.00f,
+    "Tb",       2.00f,
+    "Tc",       2.00f,
+    "Te",       2.06f,
+    "Te",       2.06f,
+    "Th",       2.00f,
+    "Ti",       2.00f,
+    "Tl",       1.96f,
+    "Tl",       1.96f,
+    "Tm",       2.00f,
+    "U",        1.86f,
+    "U",        1.86f,
+    "V",        2.00f,
+    "W",        2.00f,
+    "Xe",       2.16f,
+    "Xe",       2.16f,
+    "Y",        2.00f,
+    "Yb",       2.00f,
+    "Zn",       1.39f,
+    "Zn",       1.39f,
+    "Zr",       2.00f
+};
+
+static int nVdwRadii = sizeof(vdwRadii) / sizeof(struct VdwRadii);
+
+static int
+RapptureGetVDWRadius(const char *symbol, float *radiusPtr) 
+{
+    int low, high;
+    
+    low = 0;
+    high = nVdwRadii - 1;
+    while (low <= high) {
+	int median, result;
+
+	median = (low + high) >> 1;
+	result = strcmp(symbol, vdwRadii[median].symbol);
+	if (result < 0) {
+	    high = median - 1;
+	} else if (result > 0) {
+	    low = median + 1;
+	} else {
+	    *radiusPtr = vdwRadii[median].radius;
+	    return 1;
+	}
+    }
+    return 0;
+}
+
+/*PYMOLSERVER*/
diff -r -u '--exclude=.svn' ./layer4/Cmd.c ../pymol/layer4/Cmd.c
--- ./layer4/Cmd.c	2009-04-03 21:54:22.000000000 -0400
+++ ../pymol/layer4/Cmd.c	2011-10-12 16:33:17.000000000 -0400
@@ -5993,6 +5993,36 @@
   return APIResultCode(result);
 }
 
+/*PYMOLSERVER*/
+/* Virtual Mouse command *NJK* */
+static PyObject *CmdVMouse(PyObject *self,    PyObject *args)
+{
+    PyMOLGlobals *G = NULL;
+    int ok = false;
+    int button, modifier, state, x, y;
+    int quiet;
+    int result = 0;
+    ok = PyArg_ParseTuple(args,"iiiii",&button,&modifier,&state,&x,&y,&quiet);
+    
+    if(ok) {
+	API_SETUP_PYMOL_GLOBALS;
+	ok = (G!=NULL);
+    }
+    if(ok && (ok=APIEnterNotModal(G))) {
+	if ((state == 0) || (state == 1))
+	    ProcessMainButton(button,modifier,state,x,y);
+	else if (state == 2)
+	    ProcessMainDrag(x,y);
+	else if (state == 3)
+	    ProcessMainPassive(x,y);
+	APIExit(G);
+    }
+    if(!ok)
+	result = -1;
+    return APIResultCode(result);
+}
+/*PYMOLSERVER*/
+
 static PyObject *CmdMPNG(PyObject *self, 	PyObject *args)
 {
   PyMOLGlobals *G = NULL;
@@ -8592,6 +8622,10 @@
   {"unset",                 CmdUnset,                METH_VARARGS },
   {"unset_bond",            CmdUnsetBond,            METH_VARARGS },
   {"update",                CmdUpdate,               METH_VARARGS },
+  /*PYMOLSERVER*/
+  /* Virtual Mouse command *NJK* */
+  {"vmouse",                CmdVMouse,               METH_VARARGS },
+  /*PYMOLSERVER*/
   {"window",                CmdWindow,               METH_VARARGS },
   {"zoom",	                CmdZoom,                 METH_VARARGS },
   {NULL,		              NULL}     /* sentinel */        
Only in ../pymol/layer4: Cmd.c.~1~
diff -r -u '--exclude=.svn' ./layer5/PyMOL.c ../pymol/layer5/PyMOL.c
--- ./layer5/PyMOL.c	2009-03-14 19:50:39.000000000 -0400
+++ ../pymol/layer5/PyMOL.c	2011-10-12 17:07:38.000000000 -0400
@@ -2878,6 +2878,11 @@
       
       result->G->PyMOL = result; /* store the instance pointer */
 
+      /*PYMOLSERVER*/
+      /* Sleep Interruption Patch *NJK* */
+      pipe(result->G->CmdPipe);  
+      /*PYMOLSERVER*/
+
       result->BusyFlag = false;
       result->InterruptFlag = false;
       PyMOL_ResetProgress(result);
Only in ../pymol/layer5: PyMOL.c.~1~
diff -r -u '--exclude=.svn' ./layer5/main.c ../pymol/layer5/main.c
--- ./layer5/main.c	2009-03-23 20:06:04.000000000 -0400
+++ ../pymol/layer5/main.c	2011-10-11 14:11:08.000000000 -0400
@@ -571,6 +571,105 @@
   }
 }
 /*========================================================================*/
+/*PYMOLSERVER*/
+/* Virtual mouse support *NJK* */
+void 
+ProcessMainDrag(int x,int y)
+{
+    PyMOLGlobals *G = SingletonPyMOLGlobals;
+    
+    CMain *I = G->Main;
+    
+    y=G->Option->winY-y;
+    
+    PyMOL_Drag(PyMOLInstance,x,y,I->Modifiers);
+    
+    if(PyMOL_GetRedisplay(PyMOLInstance, true)) {
+	if(G->HaveGUI) {
+	    p_glutPostRedisplay();
+	}
+	I->IdleMode = 0;
+    }
+}
+
+/* Virtual mouse support *NJK* */
+void 
+ProcessMainButton(int button,int glMod,int state,int x,int y)
+{
+    PyMOLGlobals *G = SingletonPyMOLGlobals;
+    
+    CMain *I = G->Main;
+    
+    I->IdleMode = 0; /* restore responsiveness */
+    
+    if(PyMOL_GetPassive(PyMOLInstance, true)) {
+	ProcessMainDrag(x,y);
+    } else {
+	/* stay blocked here because Clicks->SexFrame->PParse */
+	
+	y=G->Option->winY-y;
+	
+	I->Modifiers = ((glMod&P_GLUT_ACTIVE_SHIFT) ? cOrthoSHIFT : 0) |
+	    ((glMod&P_GLUT_ACTIVE_CTRL) ? cOrthoCTRL : 0) |
+	    ((glMod&P_GLUT_ACTIVE_ALT) ? cOrthoALT : 0);
+	
+	switch(button) {
+	case P_GLUT_BUTTON_SCROLL_FORWARD:
+	case P_GLUT_BUTTON_SCROLL_BACKWARD:
+	    x=G->Option->winX/2;
+	    y=G->Option->winY/2; /* force into scene */
+	    break;
+	}
+	PyMOL_Button(PyMOLInstance,button,state,x,y,I->Modifiers);
+    }
+}
+
+/* Virtual mouse support *NJK* */
+void 
+ProcessMainPassive(int x,int y)
+{
+    PyMOLGlobals *G = SingletonPyMOLGlobals;
+    CMain *I = G->Main;
+    
+#define PASSIVE_EDGE 20
+    
+    if(PyMOL_GetPassive(G->PyMOL,false)) { /* a harmless race condition -- we
+					    * don't want to slow Python down
+					    * buy locking on passive mouse
+					    * motion */
+	
+	if((y<-PASSIVE_EDGE)||(x<-PASSIVE_EDGE)||
+	   (x>(G->Option->winX+PASSIVE_EDGE))||
+	   (y>(G->Option->winY+PASSIVE_EDGE))) {       
+	    /* release passive drag if mouse leaves window... */
+	    
+	    y=G->Option->winY-y;
+	    
+	    PyMOL_Button(PyMOLInstance,P_GLUT_LEFT_BUTTON, P_GLUT_UP,x,y,
+			 I->Modifiers);
+	    
+	    PyMOL_GetPassive(G->PyMOL,true); /* reset the flag */
+	    
+	} else {
+	    
+	    y=G->Option->winY-y;
+	    
+	    PyMOL_Drag(PyMOLInstance,x,y,I->Modifiers);
+	    
+	}
+	
+	if(PyMOL_GetRedisplay(PyMOLInstance, true)) {
+	    if(G->HaveGUI) {
+		p_glutPostRedisplay();
+	    }      
+	    I->IdleMode = 0;
+	}
+    }
+}
+/*PYMOLSERVER*/
+
+/*========================================================================*/
+
 static void MainButton(int button,int state,int x,int y)
 {
   PyMOLGlobals *G = SingletonPyMOLGlobals;
diff -r -u '--exclude=.svn' ./modules/pymol/api.py ../pymol/modules/pymol/api.py
--- ./modules/pymol/api.py	2009-03-29 21:41:32.000000000 -0400
+++ ../pymol/modules/pymol/api.py	2011-10-12 16:34:05.000000000 -0400
@@ -14,6 +14,7 @@
       load_traj,          \
       load_raw,           \
       loadable,           \
+      loadandremovepdbfile, \
       read_mmodstr,       \
       read_molstr,        \
       read_sdfstr,        \
@@ -60,6 +61,8 @@
 
 #--------------------------------------------------------------------
 import controlling
+#PYMOLSERVER
+# vmouse adds Virutal mouse support *NJK*
 from controlling import \
       button,             \
       config_mouse,       \
@@ -68,7 +71,9 @@
       order,              \
       set_key,            \
       unmask,             \
+      vmouse,             \
       edit_mode
+#PYMOSERVER
 
 #--------------------------------------------------------------------
 from querying import \
diff -r -u '--exclude=.svn' ./modules/pymol/controlling.py ../pymol/modules/pymol/controlling.py
--- ./modules/pymol/controlling.py	2009-03-11 19:48:18.000000000 -0400
+++ ../pymol/modules/pymol/controlling.py	2011-10-11 14:11:08.000000000 -0400
@@ -803,3 +803,15 @@
         if _self._raising(r,_self): raise pymol.CmdException         
         return r
 
+#PYMOLSERVER
+    # Virtual mouse support *NJK*
+    def vmouse(b,m,s,x,y,quiet=1,_self=cmd):
+        r = DEFAULT_SUCCESS
+        try:
+            _self.lock(_self)   
+            _cmd.vmouse(int(b),int(m),int(s),int(x),int(y))
+        finally:
+            _self.unlock(r,_self)
+        if _self._raising(r,_self): raise pymol.CmdException         
+        return r
+#PYMOLSERVER
diff -r -u '--exclude=.svn' ./modules/pymol/importing.py ../pymol/modules/pymol/importing.py
--- ./modules/pymol/importing.py	2009-04-03 21:54:22.000000000 -0400
+++ ../pymol/modules/pymol/importing.py	2011-10-12 15:34:04.000000000 -0400
@@ -1391,3 +1391,12 @@
             t.start()
         return r
         
+#PYMOLSERVER
+    def loadandremovepdbfile(fileName, name, state):
+        cmd.load(fileName, name, state, format="pdb")
+        import os
+        try:
+            os.remove(fileName)
+        except os.error:
+            print "can't remove pdb file " + fileName
+#PYMOLSERVER             
diff -r -u '--exclude=.svn' ./modules/pymol/keywords.py ../pymol/modules/pymol/keywords.py
--- ./modules/pymol/keywords.py	2009-03-20 21:25:13.000000000 -0400
+++ ../pymol/modules/pymol/keywords.py	2011-10-12 16:41:56.000000000 -0400
@@ -128,6 +128,10 @@
         'iterate_state' : [ self_cmd.iterate_state     , 0 , 0 , ''  , parsing.LITERAL2 ], # insecure
         'label'         : [ self_cmd.label             , 0 , 0 , ''  , parsing.LITERAL1 ], # insecure
         'load'          : [ self_cmd.load              , 0 , 0 , ''  , parsing.STRICT ],
+#PYMOLSERVER
+# Virtual mouse support *NJK*
+        'loadandremovepdbfile' : [ self_cmd.loadandremovepdbfile, 0 , 0 , ''  , parsing.STRICT ], 
+#PYMOLSEVER
         'space'         : [ self_cmd.space             , 0 , 0 , ''  , parsing.STRICT ],
         'load_embedded' : [ self_cmd.load_embedded     , 0 , 0 , ''  , parsing.STRICT ],
         'load_png'      : [ self_cmd.load_png          , 0 , 0 , ''  , parsing.STRICT ],
@@ -260,6 +264,10 @@
         'vdw_fit'       : [ self_cmd.vdw_fit           , 0 , 0 , ''  , parsing.STRICT ],   
         'view'          : [ self_cmd.view              , 0 , 0 , ''  , parsing.STRICT ],   
         'viewport'      : [ self_cmd.viewport          , 0 , 0 , ''  , parsing.STRICT ],
+#PYMOLSERVER
+# Virtual mouse support *NJK*
+        'vmouse'        : [ self_cmd.vmouse            , 0 , 0 , ''  , parsing.STRICT ], 
+#PYMOLSEVER
         'window'        : [ self_cmd.window            , 0 , 0 , ''  , parsing.STRICT ],         
         'while'         : [ self_cmd.python_help       , 0 , 0 , ''  , parsing.PYTHON ],   
         'wizard'        : [ self_cmd.wizard            , 0 , 0 , ''  , parsing.STRICT ],
