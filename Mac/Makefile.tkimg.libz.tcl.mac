# Generated automatically from Makefile.in by configure.
# Makefile.in --
#
#	This file is a Makefile for zlibtcl TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
# Copyright (c) 2002 ActiveState SRL.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.3 2004/08/12 20:24:19 andreas_kupries Exp $

#========================================================================
# Edit the following few lines when writing a new extension
#========================================================================

#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
# EXTRA_SOURCES will be replaced by WIN_SOURCES or UNIX_SOURCES, as is
# appropriate for your platform.  It is not important to specify the
# directory, as long as it is the $(srcdir) or in the generic, win or
# unix subdirectory.
#========================================================================

zlibtcl_SOURCES	=		\
		zlibtcl.c		\
		zlibtclStubInit.c	\
		zlibtclStubLib.c	\
		$(zlib_Sources)		\
		$(UNIX_SOURCES)

WIN_SOURCES	= 
UNIX_SOURCES	= 

zlib_Sources	=						\
		adler32.c	compress.c	crc32.c		\
		deflate.c	gzio.c		infback.c	\
		inffast.c	inflate.c	inftrees.c	\
		trees.c		uncompr.c	zutil.c

#========================================================================
# Identify the object files.  This replaces .c with .$(OBJEXT) for all
# the named source files.   These objects are created and linked into the
# final library.  In these do not correspond directly to the source files
# above, you will need to enumerate the object files here.
# Normally we would use $(OBJEXT), but certain make executables won't do
# the extra macro in a macro conversion properly.
#
# "zlibtcl_LIB_FILE" refers to the library (dynamic or static as per
# configuration options) composed of the named objects.
#========================================================================

zlibtcl_OBJECTS		= $(zlibtcl_SOURCES:.c=.o)
zlibtcl_LIB_FILE	= libzlibtcl1.2.1.dylib

zlibtclstub_OBJECTS	= zlibtclStubLib.$(OBJEXT)
zlibtclstub_LIB_FILE	= libzlibtclstub1.2.1.a

#========================================================================
# RUNTIME_SOURCES identifies Tcl runtime files that are associated with
# this package that need to be installed, if any.
#========================================================================

#RUNTIME_SOURCES =

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS	=	$(srcdir)/zlibtcl.h		\
			$(srcdir)/zlibtclDecls.h	\
			$(srcdir)/zlibtclDeclsMask.h	\
			$(srcdir)/zlibtclDeclsUnmask.h

#========================================================================
# This is a list of script files to be installed
#========================================================================

GENERIC_SCRIPTS	=

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

#ZLIBSUPPORT_NEW_VAR	= @ZLIBSUPPORT_NEW_VAR@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

#========================================================================
# The variable "$(PACKAGE)_LIB_FILE" is the parameterized name of the
# library that we are building.
#========================================================================

lib_BINARIES	= $($(PACKAGE)_LIB_FILE) $($(PACKAGE)stub_LIB_FILE)
BINARIES	= $(lib_BINARIES)

SHELL		= /bin/sh

srcdir		= .
prefix		= /opt/rappture
exec_prefix	= /opt/rappture

bindir		= ${exec_prefix}/bin
libdir		= ${exec_prefix}/lib
datadir		= ${prefix}/share
mandir		= ${prefix}/man
includedir	= ${prefix}/include

DESTDIR		=

PKG_DIR		= $(PACKAGE)$(VERSION)
pkgdatadir	= $(datadir)/$(PKG_DIR)
pkglibdir	= $(libdir)/$(PKG_DIR)
pkgincludedir	= $(includedir)/$(PKG_DIR)

top_builddir	= .

INSTALL		= /usr/bin/install -c
INSTALL_PROGRAM	= ${INSTALL}
INSTALL_DATA	= ${INSTALL} -m 644
INSTALL_SCRIPT	= ${INSTALL_PROGRAM}

PACKAGE		= zlibtcl
VERSION		= 1.2.1
CC		= gcc -pipe
CFLAGS_DEBUG	= -g
CFLAGS_DEFAULT	= $(CFLAGS_OPTIMIZE)
CFLAGS_OPTIMIZE	= -O3
CLEANFILES	= 
EXEEXT		= 
LDFLAGS_DEBUG	= 
LDFLAGS_DEFAULT	= $(LDFLAGS_OPTIMIZE)
LDFLAGS_OPTIMIZE = 
MAKE_LIB	= ${SHLIB_LD} -o $@ $($(PACKAGE)_OBJECTS) ${SHLIB_LDFLAGS} ${SHLIB_LD_LIBS} 
MAKE_SHARED_LIB	= ${SHLIB_LD} -o $@ $($(PACKAGE)_OBJECTS) ${SHLIB_LDFLAGS} ${SHLIB_LD_LIBS}
MAKE_STATIC_LIB	= ${STLIB_LD} $@ $($(PACKAGE)_OBJECTS)
MAKE_STUB_LIB	= ${STLIB_LD} $@ $($(PACKAGE)stub_OBJECTS)
OBJEXT		= o
RANLIB		= ranlib -s
SHLIB_CFLAGS	= -fno-common
SHLIB_LD	= cc -dynamiclib ${LDFLAGS}
SHLIB_LDFLAGS	= $(LDFLAGS_DEFAULT)
SHLIB_LD_LIBS	= ${LIBS} -L/opt/rappture/lib -ltclstub8.4 ${TCL_LIBS}
STLIB_LD	= ${AR} cr
TCL_DEFS	=  -DHAVE_COREFOUNDATION=1 -DMAC_OSX_TCL=1 -DUSE_VFORK=1 -DTCL_DEFAULT_ENCODING=\"utf-8\" -DTCL_LOAD_FROM_MEMORY=1 -DTCL_WIDE_INT_TYPE=long\ long -DWORDS_BIGENDIAN=1 -DHAVE_GETCWD=1 -DHAVE_OPENDIR=1 -DHAVE_STRSTR=1 -DHAVE_STRTOL=1 -DHAVE_STRTOLL=1 -DHAVE_STRTOULL=1 -DHAVE_TMPNAM=1 -DHAVE_WAITPID=1 -DNO_VALUES_H=1 -DHAVE_LIMITS_H=1 -DHAVE_UNISTD_H=1 -DHAVE_SYS_PARAM_H=1 -DUSE_TERMIOS=1 -DHAVE_SYS_TIME_H=1 -DTIME_WITH_SYS_TIME=1 -DHAVE_TM_ZONE=1 -DHAVE_GMTIME_R=1 -DHAVE_LOCALTIME_R=1 -DHAVE_TM_GMTOFF=1 -DHAVE_ST_BLKSIZE=1 -DSTDC_HEADERS=1 -DHAVE_SIGNED_CHAR=1 -DHAVE_PUTENV_THAT_COPIES=1 -DHAVE_LANGINFO=1 -DHAVE_SYS_IOCTL_H=1 -DHAVE_SYS_FILIO_H=1 
TCL_BIN_DIR	= /opt/rappture/lib
TCL_SRC_DIR	= /opt/rappture-runtime/tcl8.4.11
# This is necessary for packages that use private Tcl headers
#TCL_TOP_DIR_NATIVE	= @TCL_TOP_DIR_NATIVE@
# Not used, but retained for reference of what libs Tcl required
TCL_LIBS	=   -framework CoreFoundation 

#========================================================================
# TCLLIBPATH seeds the auto_path in Tcl's init.tcl so we can test our
# package without installing.  The other environment variables allow us
# to test against an uninstalled Tcl.  Add special env vars that you
# require for testing here (like TCLX_LIBRARY).
#========================================================================

EXTRA_PATH	= $(top_builddir):$(TCL_BIN_DIR)
TCLSH_ENV	= TCL_LIBRARY=`echo $(TCL_SRC_DIR)/library` \
		  LD_LIBRARY_PATH="$(EXTRA_PATH):$(LD_LIBRARY_PATH)" \
		  LIBPATH="$(EXTRA_PATH):${LIBPATH}" \
		  SHLIB_PATH="$(EXTRA_PATH):${SHLIB_PATH}" \
		  PATH="$(EXTRA_PATH):$(PATH)" \
		  TCLLIBPATH="$(top_builddir)"
TCLSH_PROG	= /opt/rappture/lib/../bin/tclsh8.4
TCLSH		= $(TCLSH_ENV) $(TCLSH_PROG)
SHARED_BUILD	= 1

INCLUDES	= -I$(srcdir) -I"/opt/rappture/include"

EXTRA_CFLAGS	= $(MEM_DEBUG_FLAGS) -arch ppc -pipe

DEFS		= $(TCL_DEFS)  -DVERSION=\"1.2.1\" -DZLIBTCL_VERSION=\"1.2.1\" -DTCL_WIDE_INT_TYPE=long\ long -DNO_VALUES_H=1 -DHAVE_UNISTD_H=1 -DHAVE_SYS_PARAM_H=1 -DUSE_TCL_STUBS=1  $(EXTRA_CFLAGS)

CONFIG_CLEAN_FILES = Makefile zlibtclConfig.sh pkgIndex.tcl

CPPFLAGS	=  -DPACKAGE_NAME=\"$(PACKAGE)\"
LIBS		= 
AR		= ar
CFLAGS		=  ${CFLAGS_DEFAULT} ${CFLAGS_WARNING} ${SHLIB_CFLAGS}
COMPILE		= $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries
	if test "x$(SHARED_BUILD)" = "x1"; then \
	    $(INSTALL_DATA) pkgIndex.tcl $(DESTDIR)$(pkglibdir); \
	fi

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	@mkdir -p $(DESTDIR)$(includedir)
	@echo "Installing header files in $(DESTDIR)$(includedir)"
	@for i in $(GENERIC_HDRS) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(includedir) ; \
	done;
##	@for p in $(GENERIC_SCRIPTS); do \
##	  if test -f $$p; then \
##	    echo "Installing $$p"; \
##	    $(INSTALL_DATA) $$p $(pkglibdir); \
##	  else :; fi; \
##	done
##	@echo "libraries done"

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc


testshell	=	$(TCLSH_PROG) $(srcdir)/testshell

test: binaries libraries
	@echo The support package "'zlibtcl'" cannot be tested separately.
	@echo Test the packages "'tkimg::png'" and "'tkimg::tiff'" to exercise its functionality.

#	$(TCLSH) `echo $(srcdir)/tests/all.tcl` $(TESTFLAGS)
#	$(testshell)	\
#		-load 'load ./$(zlibtcl_LIB_FILE)' \
#		-testdir $(srcdir)/tea.tests
#
#test: binaries libraries
#	echo load ./$(zlibtcl_LIB_FILE) \; cd $(srcdir)/tests \; source all | $(TCLSH) $(TESTFLAGS)


shell: binaries libraries
	@$(TCLSH) $(SCRIPT)

gdb:
	$(TCLSH_ENV) gdb $(TCLSH_PROG) $(SCRIPT)

depend:

#========================================================================
# $($(PACKAGE)_LIB_FILE) should be listed as part of the BINARIES variable
# mentioned above.  That will ensure that this target is built when you
# run "make binaries".
#
# The $($(PACKAGE)_OBJECTS) objects are created and linked into the final
# library.  In most cases these object files will correspond to the
# source files above.
#========================================================================

$($(PACKAGE)_LIB_FILE): $($(PACKAGE)_OBJECTS)
	-rm -f $($(PACKAGE)_LIB_FILE)
	${MAKE_LIB}
#	$(RANLIB) $($(PACKAGE)_LIB_FILE)

$($(PACKAGE)stub_LIB_FILE): $($(PACKAGE)stub_OBJECTS)
	-rm -f $($(PACKAGE)stub_LIB_FILE)
	${MAKE_STUB_LIB}
	$(RANLIB) $($(PACKAGE)stub_LIB_FILE)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# zlibtcl.$(OBJEXT): $(srcdir)/generic/zlibtcl.c
# 	$(COMPILE) -c `echo $(srcdir)/generic/zlibtcl.c` -o $@
#
# Setting the VPATH variable to a list of paths will cause the makefile
# to look into these paths when resolving .c to .obj dependencies.
# As necessary, add $(srcdir):$(srcdir)/compat:....
#========================================================================

VPATH = $(srcdir):$(srcdir)/..

.c.$(OBJEXT):
	$(COMPILE) -c `echo $<` -o $@

#========================================================================
# Create the pkgIndex.tcl file.
# It is usually easiest to let Tcl do this for you with pkg_mkIndex, but
# you may find that you need to customize the package.  If so, either
# modify the -hand version, or create a pkgIndex.tcl.in file and have
# the configure script output the pkgIndex.tcl by editing configure.in.
#========================================================================
#
# The configure generates the index, nothing to be done here.
#
#pkgIndex.tcl:
#	( echo pkg_mkIndex . $($(PACKAGE)_LIB_FILE) \; exit; ) | $(TCLSH)
#
# pkgIndex.tcl-hand:
#	(echo 'package ifneeded $(PACKAGE) $(VERSION) \
#	    [list load [file join $$dir $($(PACKAGE)_LIB_FILE)]]'\
#	) > pkgIndex.tcl

#========================================================================
# Distribution creation
# You may need to tweak this target to make it work correctly.
#========================================================================

#COMPRESS	= tar cvf $(PKG_DIR).tar $(PKG_DIR); compress $(PKG_DIR).tar
COMPRESS	= gtar zcvf $(PKG_DIR).tar.gz $(PKG_DIR)
DIST_ROOT	= /tmp/dist
DIST_DIR	= $(DIST_ROOT)/$(PKG_DIR)

dist-clean:
	rm -rf $(DIST_DIR) $(DIST_ROOT)/$(PKG_DIR).tar.*

dist: dist-clean doc
	mkdir -p $(DIST_DIR)
	cp -p $(srcdir)/ChangeLog $(srcdir)/README* $(srcdir)/doc/license* \
		$(srcdir)/aclocal.m4 $(srcdir)/configure $(srcdir)/*.in \
		$(DIST_DIR)/
	chmod 664 $(DIST_DIR)/Makefile.in $(DIST_DIR)/aclocal.m4
	chmod 775 $(DIST_DIR)/configure $(DIST_DIR)/configure.in

	mkdir $(DIST_DIR)/tclconfig
	cp $(srcdir)/tclconfig/install-sh $(srcdir)/tclconfig/tcl.m4 \
		$(DIST_DIR)/tclconfig/
	chmod 664 $(DIST_DIR)/tclconfig/tcl.m4
	chmod +x $(DIST_DIR)/tclconfig/install-sh

	-list='htdocs/art demos generic library mac tests unix win tea.tests tools tools/rules'; \
	for p in $$list; do \
	    if test -d $(srcdir)/$$p ; then \
		mkdir -p $(DIST_DIR)/$$p; \
		cp -p $(srcdir)/$$p/*.* $(srcdir)/$$p/* $(DIST_DIR)/$$p/; \
	    fi; \
	done

	-list='doc'; \
	for p in $$list; do \
	    if test -d $$p ; then \
		mkdir -p $(DIST_DIR)/$$p; \
		cp -p $$p/*.* $$p/* $(DIST_DIR)/$$p/; \
	    fi; \
	done
	-mv $(DIST_DIR)/htdocs/art $(DIST_DIR)/doc/art
	rm -rf $(DIST_DIR)/htdocs

	(cd $(DIST_ROOT); $(COMPRESS);)

dist_orig:
	rm -rf $(PKG_DIR)*
	ls -d $(srcdir)/* > __FILES
	mkdir $(PKG_DIR)
	cp -rf `cat __FILES | grep -v __FILES` $(PKG_DIR)
	rm __FILES
	find $(PKG_DIR) -name CVS -prune -exec rm -rf {} \;
	cd $(PKG_DIR) ; $(TCLSH_PROG) PREPARE
	-tar cf - $(PKG_DIR) | gzip --best > $(PKG_DIR).tar.gz
	-tar cf - $(PKG_DIR) | bzip2 > $(PKG_DIR).tar.bz2
	-zip -r $(PKG_DIR).zip $(PKG_DIR)
	rm -rf $(PKG_DIR)

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.$(OBJEXT) core *.core
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Library files go into the lib directory.
# In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries:
	@mkdir -p $(DESTDIR)$(pkglibdir)
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(pkglibdir)/$$p; \
	    echo " $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(pkglibdir)/$$p; \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(pkglibdir)/$$lib; \
		fi; \
	    fi; \
	  fi; \
	done
	@list='$(RUNTIME_SOURCES)'; for p in $$list; do \
	  if test -f $(srcdir)/library/$$p; then \
	    echo " Install $$p $(DESTDIR)$(pkglibdir)/$$p"; \
	    $(INSTALL_DATA) $(srcdir)/library/$$p $(DESTDIR)$(pkglibdir)/$$p; \
	  fi; \
	done
	$(INSTALL_DATA) zlibtclConfig.sh $(DESTDIR)$(libdir)

#========================================================================
# Install binary executables (e.g. .exe files and dependent .dll files)
# This is for files that must go in the bin directory (located next to
# wish and tclsh), like dependent .dll files on Windows.
#
# You should not have to modify this target, except to define bin_BINARIES
# above if necessary.
#========================================================================

install-bin-binaries:
	@mkdir -p $(DESTDIR)$(bindir)
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  fi; \
	done

.SUFFIXES: .c .$(OBJEXT)

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	list='$(lib_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(RUNTIME_SOURCES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(pkglibdir)/$$p; \
	done
	list='$(bin_BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/$$p; \
	done

#========================================================================
#
# Target to regenerate header files and stub files from the *.decls tables.
#
#========================================================================

## Reminder how to create stubs without configuring the package
##
##	$(MAKE) SHELL=/bin/sh TCLSH_PROG=tclsh srcdir=. genstubs

genstubs:
	$(TCLSH_PROG)	\
		$(srcdir)/tools/genStubs.tcl $(srcdir)	\
		$(srcdir)/zlibtcl.decls

#========================================================================
#
# Target to check that all exported functions have an entry in the stubs
# tables.
#
#========================================================================

zlibtcl_DECLS = \
	$(srcdir)/zlibtcl.decls

checkstubs:
	-@for i in `nm -p $(zlibtcl_LIB_FILE) | awk '$$2 ~ /T/ { print $$3 }' \
		| sort -n`; do \
		match=0; \
		for j in $(zlibtcl_DECLS); do \
		    if [ `grep -c $$i $$j` -gt 0 ]; then \
			match=1; \
		    fi; \
		done; \
		if [ $$match -eq 0 ]; then echo $$i; fi \
	done


.PHONY: all binaries clean depend distclean doc install libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
